//
//  ViewController.m
//  InClassPracticeApp
//
//  Created by alex on 19/4/20.
//  Copyright Â© 2020 alex. All rights reserved.
//

#import "ViewController.h"

@interface ViewController ()

@end

@implementation ViewController

@synthesize cylinder, tfHeight, lblVolume;

- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    [self setCircle:[[Circle alloc]init]];
    
    [self setCylinder: [[Cylinder alloc] init]];
    
    [[self btnCalcVolume] setEnabled:NO];
    
    //this is for the UITextField: hide keyboard by touching somewhere else using gestures, also create the dismisskeyboard method
    UITapGestureRecognizer *gestureRecognizer = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(dismissKeyboard)];
    [self.view addGestureRecognizer:gestureRecognizer];
    gestureRecognizer.cancelsTouchesInView = NO;
    
}

- (void)dismissKeyboard
{
     [self.view endEditing:YES];
}


/*
 To create the action proceed in the same way as the outlets ctrl-click  and drag it here
 */
- (IBAction)calculateCircleMeasures:(id)sender {
    //here we will be using plain getters / setters auto-generated by @property
    float radius =  [[[self tfRadius] text] floatValue];
    //use getter too get the local circle previously created
    Circle* myCircle = [self circle];
    [myCircle setRadius:radius];
    
    if(radius > 0){
        //enable Show Cylinder Detail button
        [[self btnCalcVolume] setEnabled:YES];
        
        //calculate measurments
        float area = [myCircle calculateArea];
        float diameter = [myCircle calculateDiameter];
        float circumference = [myCircle calculateCircumference];
        //
        [[self lblDiameter] setText:[NSString stringWithFormat:@"%f", diameter]];
        [[self lblArea] setText:[NSString stringWithFormat:@"%f", area]];
        [[self lblCircumference] setText:[NSString stringWithFormat:@"%f", circumference]];
        
    }
    
}
- (IBAction)calculateCylinderMeasures:(id)sender {
    /* pay attention here, we did not mention [self cylinder] or [self tfHeight] or [self lblVolume]
     to get the reference to these attributes, the reason for this is the explicit usage of synthesize
     If you don't use synthesize explicitly the compiler will automatically generate an @synthesize
     statement for you, it actually creates an instance variable name beginning with an underscore character,
     so you would get the following code generated:
     @synthesize car = _car;
     which was already generated by @property
     if you use
     @synthesize car; it's the same as @synthesize car = car;
     so your getter/setters methods won't use _car it will use car, this is the reason why we can use
     the property cylinder straight forward, but in doing that we are using the ivar not the getter,
     sometimes this is not what you want.
     read this: https://programmer.help/blogs/objective-c-property-synthesize-and-dynamic.html
     
     Now Apple recommends that you use the property reference [self cylinder] or self.cylinder and _ivar
     for init methods
     */
    
    [cylinder setRadius:[[[self tfRadius] text] floatValue]];
    [cylinder setHeight:[[tfHeight text] floatValue]];
    
    //here we use the getter inside Cylinder class
    if([cylinder height] > 0){
        [lblVolume setText:[NSString stringWithFormat:@"%f", [cylinder calculateVolume]]];
    }
}



@end
